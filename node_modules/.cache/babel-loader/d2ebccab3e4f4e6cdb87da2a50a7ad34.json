{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aliasgarmerchant/Desktop/Decentralized-Storage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/aliasgarmerchant/Desktop/Decentralized-Storage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/aliasgarmerchant/Desktop/Decentralized-Storage/src/components/App.js\";\n//import DStorage from '../abis/DStorage.json'\nimport React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport Main from './Main';\nimport Web3 from 'web3';\nimport './App.css'; //Declare IPFS\n\nclass App extends Component {\n  componentWillMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.loadWeb3();\n\n            case 2:\n              _context.next = 4;\n              return _this.loadBlockchainData();\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n\n  loadWeb3() {//Setting up Web3\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n\n  loadBlockchainData() {//Declare Web3\n    //Load account\n    //Network ID\n    //IF got connection, get data from contracts\n    //Assign contract\n    //Get files amount\n    //Load files&sort by the newest\n    //Else\n    //alert Error\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  } // Get file from user\n\n\n  //Set states\n  constructor(props) {\n    super(props);\n\n    this.captureFile = event => {};\n\n    this.uploadFile = description => {//Add file to the IPFS\n      //Check If error\n      //Return error\n      //Set state to loading\n      //Assign value for the file without extension\n      //Call smart contract uploadFile function \n    };\n\n    this.state = {}; //Bind functions\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      account: this.state.account,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }), this.state.loading ? /*#__PURE__*/React.createElement(\"div\", {\n      id: \"loader\",\n      className: \"text-center mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 59\n      }\n    }, \"Loading...\")) : /*#__PURE__*/React.createElement(Main, {\n      files: this.state.files,\n      captureFile: this.captureFile,\n      uploadFile: this.uploadFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/aliasgarmerchant/Desktop/Decentralized-Storage/src/components/App.js"],"names":["React","Component","Navbar","Main","Web3","App","componentWillMount","loadWeb3","loadBlockchainData","constructor","props","captureFile","event","uploadFile","description","state","render","account","loading","files"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAO,WAAP,C,CAEA;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAEpBK,EAAAA,kBAAN,GAA2B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACnB,KAAI,CAACC,QAAL,EADmB;;AAAA;AAAA;AAAA,qBAEnB,KAAI,CAACC,kBAAL,EAFmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG1B;;AAEKD,EAAAA,QAAN,GAAiB,CACf;;AADe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEhB;;AAEKC,EAAAA,kBAAN,GAA2B,CACzB;AAEA;AAEA;AAEA;AACE;AAEA;AAEA;AAEF;AACE;;AAfuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiB1B,GA5ByB,CA8B1B;;;AAqBA;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SArBnBC,WAqBmB,GArBLC,KAAK,IAAI,CACtB,CAoBkB;;AAAA,SAhBnBC,UAgBmB,GAhBNC,WAAW,IAAI,CAE1B;AAEE;AACE;AAEF;AAEA;AAEA;AAEH,KAGkB;;AAEjB,SAAKC,KAAL,GAAa,EAAb,CAFiB,CAKjB;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKD,KAAL,CAAWE,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEI,KAAKF,KAAL,CAAWG,OAAX,gBACE;AAAK,MAAA,EAAE,EAAC,QAAR;AAAiB,MAAA,SAAS,EAAC,kBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA9C,CADF,gBAEE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE,KAAKH,KAAL,CAAWI,KADpB;AAEE,MAAA,WAAW,EAAE,KAAKR,WAFpB;AAGE,MAAA,UAAU,EAAE,KAAKE,UAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJN,CADF;AAaD;;AA1EyB;;AA6E5B,eAAeR,GAAf","sourcesContent":["//import DStorage from '../abis/DStorage.json'\nimport React, { Component } from 'react';\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport Web3 from 'web3';\nimport './App.css';\n\n//Declare IPFS\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    //Setting up Web3\n  }\n\n  async loadBlockchainData() {\n    //Declare Web3\n\n    //Load account\n\n    //Network ID\n\n    //IF got connection, get data from contracts\n      //Assign contract\n\n      //Get files amount\n\n      //Load files&sort by the newest\n\n    //Else\n      //alert Error\n\n  }\n\n  // Get file from user\n  captureFile = event => {\n  }\n\n\n  //Upload File\n  uploadFile = description => {\n\n    //Add file to the IPFS\n\n      //Check If error\n        //Return error\n\n      //Set state to loading\n\n      //Assign value for the file without extension\n\n      //Call smart contract uploadFile function \n\n  }\n\n  //Set states\n  constructor(props) {\n    super(props)\n    this.state = {\n    }\n\n    //Bind functions\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n              files={this.state.files}\n              captureFile={this.captureFile}\n              uploadFile={this.uploadFile}\n            />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}